
(STRATEGY
    INNERMOST)

(VAR
    x1 x2 x3 x4 x6 x7 x9 x10 x8 x0 x5 x11 x13 x14 x15 x12)
(RULES
    dc_cond(False(),x1,x2,x3,x4,x6) -> @(x2,x6)
    mapL_cond(NilL(),x7) -> NilL()
    mapL_cond(ConsL(x9,x10),x7) -> ConsL(@(x7,x9),@(@(rec[mapL_0](),x7),x10))
    @(mapL_f(x7),x8) -> mapL_cond(x8,x7)
    @(mapL(),x7) -> mapL_f(x7)
    @(rec[mapL_0](),x0) -> @(mapL(),x0)
    dc_cond(True(),x1,x2,x3,x4,x6) -> @(@(x4,x6)
                                       ,@(@(rec[mapL_0]()
                                           ,rec[dc_0](x1,x2,x3,x4))
                                         ,@(x3,x6)))
    @(dc(x1,x2,x3,x4),x6) -> dc_cond(@(x1,x6),x1,x2,x3,x4,x6)
    @(rec[dc_0](x1,x2,x3,x4),x5) -> @(dc(x1,x2,x3,x4),x5)
    @(divideAndConquer_isDivisible_solve_divide_combine(x1,x2,x3,x4),x5) ->
      @(rec[dc_0](x1,x2,x3,x4),x5)
    @(divideAndConquer_isDivisible_solve_divide(x1,x2,x3),x4) ->
      divideAndConquer_isDivisible_solve_divide_combine(x1,x2,x3,x4)
    @(divideAndConquer_isDivisible_solve(x1,x2),x3) ->
      divideAndConquer_isDivisible_solve_divide(x1,x2,x3)
    @(divideAndConquer_isDivisible(x1),x2) ->
      divideAndConquer_isDivisible_solve(x1,x2)
    @(divideAndConquer(),x1) -> divideAndConquer_isDivisible(x1)
    divisible_cond(Nil()) -> False()
    divisible_cond_1(Nil()) -> False()
    divisible_cond_1(Cons(x4,x5)) -> True()
    divisible_cond(Cons(x2,x3)) -> divisible_cond_1(x3)
    @(divisible(),x1) -> divisible_cond(x1)
    @(mergesort_0(),x1) -> x1
    take_cond(0(),x3) -> Nil()
    head_cond(Nil()) -> Head_error_empty_list()
    head_cond(Cons(x6,x7)) -> x6
    @(head(),x5) -> head_cond(x5)
    take_cond(S(x4),x3) -> Cons(@(head(),x3)
                               ,@(@(rec[take_0](),x4),@(tail(),x3)))
    @(take_n(x2),x3) -> take_cond(x2,x3)
    @(take(),x2) -> take_n(x2)
    @(rec[take_0](),x0) -> @(take(),x0)
    halve_cond(0()) -> 0()
    halve_cond_1(0()) -> S(0())
    halve_cond_1(S(x4)) -> S(@(rec[halve_0](),x4))
    halve_cond(S(x3)) -> halve_cond_1(x3)
    @(halve(),x2) -> halve_cond(x2)
    @(rec[halve_0](),x0) -> @(halve(),x0)
    length_cond(Nil()) -> 0()
    length_cond(Cons(x3,x4)) -> S(@(rec[length_0](),x4))
    @(length(),x2) -> length_cond(x2)
    @(rec[length_0](),x0) -> @(length(),x0)
    drop_cond(0(),x3) -> x3
    tail_cond(Nil()) -> Tail_error_empty_list()
    tail_cond(Cons(x6,x7)) -> x7
    @(tail(),x5) -> tail_cond(x5)
    drop_cond(S(x4),x3) -> @(@(rec[drop_0](),x4),@(tail(),x3))
    @(drop_n(x2),x3) -> drop_cond(x2,x3)
    @(drop(),x2) -> drop_n(x2)
    @(rec[drop_0](),x0) -> @(drop(),x0)
    @(divide(),x1) -> ConsL(@(@(rec[take_0]()
                               ,@(rec[halve_0](),@(rec[length_0](),x1)))
                             ,x1)
                           ,ConsL(@(@(rec[drop_0]()
                                     ,@(rec[halve_0](),@(rec[length_0](),x1)))
                                   ,x1)
                                 ,NilL()))
    @(const_f(x1),x2) -> x1
    @(const(),x1) -> const_f(x1)
    merge_cond(Nil(),x6,x7) -> x7
    merge_cond_1(Nil(),x6,x7,x8,x9) -> x6
    merge_cond_2(True(),x6,x7,x8,x9,x10,x11) -> Cons(x8
                                                    ,@(@(rec[merge_0](),x9),x7))
    merge_cond_2(False(),x6,x7,x8,x9,x10,x11) -> Cons(x10
                                                     ,@(@(rec[merge_0](),x6)
                                                       ,x11))
    leq_cond(0(),x13) -> True()
    leq_cond_1(0(),x14) -> False()
    leq_cond_1(S(x15),x14) -> @(@(rec[leq_0](),x14),x15)
    leq_cond(S(x14),x13) -> leq_cond_1(x13,x14)
    @(leq_x(x12),x13) -> leq_cond(x12,x13)
    @(leq(),x12) -> leq_x(x12)
    @(rec[leq_0](),x0) -> @(leq(),x0)
    merge_cond_1(Cons(x10,x11),x6,x7,x8,x9) -> merge_cond_2(@(@(rec[leq_0](),x8)
                                                             ,x10)
                                                           ,x6
                                                           ,x7
                                                           ,x8
                                                           ,x9
                                                           ,x10
                                                           ,x11)
    merge_cond(Cons(x8,x9),x6,x7) -> merge_cond_1(x7,x6,x7,x8,x9)
    @(merge_ys(x6),x7) -> merge_cond(x6,x6,x7)
    @(merge(),x6) -> merge_ys(x6)
    @(rec[merge_0](),x0) -> @(merge(),x0)
    combine_cond_1(ConsL(x4,x5),x2) -> @(@(rec[merge_0](),x2),x4)
    combine_cond(ConsL(x2,x3)) -> combine_cond_1(x3,x2)
    @(combine(),x1) -> combine_cond(x1)
    main(x0) -> @(@(@(@(@(divideAndConquer(),divisible()),mergesort_0())
                     ,divide())
                   ,@(const(),combine()))
                 ,x0))

