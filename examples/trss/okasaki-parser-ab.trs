
(STRATEGY
    INNERMOST)

(VAR
    x2 x1 x4 x3 x5)
(RULES
    bind'_0[6](eos(),x2,bot[0](),runParser_0(),runParser_1(),Nil(),S(x1)) ->
      ParseSuccess(Unit(),Nil())
    bind'_0[6](eos()
              ,x4
              ,bot[0]()
              ,runParser_0()
              ,runParser_1()
              ,Cons(x3,x2)
              ,S(x1)) -> ParseFail(S(x1))
    bind'_0[6](bind_p_f(bind_p_f(any(),filter_0(eqChar_x(B()))),bind'_0(eos()))
              ,x3
              ,bot[0]()
              ,runParser_0()
              ,runParser_1()
              ,x2
              ,S(x1)) -> any_anonymous_2[1](bind_1(filter_0(eqChar_x(B()))
                                                  ,bind_1(bind'_0(eos())
                                                         ,runParser_0()))
                                           ,runParser_1()
                                           ,x2
                                           ,S(x1))
    bind_1[4](bind'_0(x4),runParser_0(),x3,runParser_1(),x2,S(x1)) ->
      bind'_0[6](x4,x3,bot[0](),runParser_0(),runParser_1(),x2,S(x1))
    bind_1[4](filter_0(eqChar_x(A()))
             ,bind_1(x3,runParser_0())
             ,A()
             ,runParser_1()
             ,x2
             ,S(x1)) -> bind_1[4](x3,runParser_0(),A(),runParser_1(),x2,S(x1))
    bind_1[4](filter_0(eqChar_x(A())),x3,B(),runParser_1(),x2,S(x1)) ->
      ParseFail(S(x1))
    bind_1[4](filter_0(eqChar_x(A())),x3,C(),runParser_1(),x2,S(x1)) ->
      ParseFail(S(x1))
    bind_1[4](filter_0(eqChar_x(B())),x3,A(),runParser_1(),x2,S(x1)) ->
      ParseFail(S(x1))
    bind_1[4](filter_0(eqChar_x(B()))
             ,bind_1(x3,runParser_0())
             ,B()
             ,runParser_1()
             ,x2
             ,S(x1)) -> bind_1[4](x3,runParser_0(),B(),runParser_1(),x2,S(x1))
    bind_1[4](filter_0(eqChar_x(B())),x3,C(),runParser_1(),x2,S(x1)) ->
      ParseFail(S(x1))
    any_anonymous_2[1](bind_1(x3,x2),runParser_1(),Nil(),x1) -> ParseFail(x1)
    any_anonymous_2[1](bind_1(x5,x4),runParser_1(),Cons(x3,x2),x1) ->
      bind_1[4](x5,x4,x3,runParser_1(),x2,S(x1))
    main(x1) ->
      any_anonymous_2[1](bind_1(filter_0(eqChar_x(A()))
                               ,bind_1(bind'_0(bind_p_f(bind_p_f(any()
                                                                ,filter_0(eqChar_x(B())))
                                                       ,bind'_0(eos())))
                                      ,runParser_0()))
                        ,runParser_1()
                        ,x1
                        ,0()))
(COMMENT
    Types are as follows: 
      0 :: C
      A :: A
      B :: A
      C :: A
      Cons :: [A,B] -> B
      False :: Z
      Nil :: B
      ParseFail :: [C] -> D
      ParseSuccess :: [A,B] -> D
      S :: [C] -> C
      True :: Z
      Unit :: A
      any_anonymous :: [M] -> I
      eos_anonymous :: [M] -> I
      fail_anonymous :: I
      runParser_anonymous :: [A] -> I
      any :: J
      eos :: J
      bind_p_f :: [J,K] -> J
      fail :: Y
      bind_p :: [V] -> W
      bind'_p :: [S] -> T
      filter_p :: [J] -> 1
      runParser_p :: [N] -> O
      eqChar_x :: [A] -> U
      return_x :: [A] -> Y
      any_0 :: 2
      bind_0 :: [J,K] -> R
      bind'_0 :: [J] -> K
      eos_0 :: R
      fail_0 :: X
      filter_0 :: [U] -> K
      return_0 :: [A] -> X
      runParser_0 :: M
      any_anonymous_1 :: [M,G] -> H
      eos_anonymous_1 :: [M,G] -> H
      fail_anonymous_1 :: [G] -> H
      runParser_anonymous_1 :: [A] -> H
      bind_1 :: [K,M] -> M
      runParser_1 :: G
      any_anonymous_2 :: [M,G,E] -> F
      eos_anonymous_2 :: [M,G,E] -> F
      fail_anonymous_2 :: [G] -> F
      runParser_anonymous_2 :: [A,E] -> F
      bot[0] :: L
      filter_cond :: [Z,A] -> Y
      main :: [B] -> D
      any_anonymous[1] :: [M,G] -> H
      eos_anonymous[1] :: [M,G] -> H
      fail_anonymous[1] :: [G] -> H
      runParser_anonymous[1] :: [A,G] -> H
      any[1] :: [L] -> 2
      bind[1] :: [V] -> W
      bind'[1] :: [S] -> T
      char[1] :: [A] -> J
      eos[1] :: [L] -> R
      eqChar[1] :: [A] -> U
      bind_p_f[1] :: [J,K,L] -> R
      fail[1] :: [L] -> X
      filter[1] :: [J] -> 1
      bind_p[1] :: [J,K] -> J
      bind'_p[1] :: [J,J] -> J
      filter_p[1] :: [J,U] -> J
      runParser_p[1] :: [J,B] -> D
      return[1] :: [A] -> Y
      runParser[1] :: [N] -> O
      eqChar_x[1] :: [A,A] -> Z
      return_x[1] :: [A,L] -> X
      any_0[1] :: [M] -> I
      bind_0[1] :: [J,K,M] -> I
      bind'_0[1] :: [J,P] -> J
      eos_0[1] :: [M] -> I
      fail_0[1] :: [M] -> I
      filter_0[1] :: [U,A] -> Y
      return_0[1] :: [A,M] -> I
      runParser_0[1] :: [A] -> I
      any_anonymous_1[1] :: [M,G,E] -> F
      eos_anonymous_1[1] :: [M,G,E] -> F
      fail_anonymous_1[1] :: [G,E] -> F
      runParser_anonymous_1[1] :: [A,E] -> F
      bind_1[1] :: [K,M,A] -> I
      runParser_1[1] :: [C] -> D
      any_anonymous_2[1] :: [M,G,B,C] -> D
      eos_anonymous_2[1] :: [M,G,B,C] -> D
      fail_anonymous_2[1] :: [G,C] -> D
      runParser_anonymous_2[1] :: [A,B,C] -> D
      filter_cond[1] :: [Z,A,L] -> X
      any_anonymous[2] :: [M,G,E] -> F
      eos_anonymous[2] :: [M,G,E] -> F
      fail_anonymous[2] :: [G,E] -> F
      runParser_anonymous[2] :: [A,G,E] -> F
      any[2] :: [L,M] -> I
      bind[2] :: [J,K] -> J
      bind'[2] :: [J,J] -> J
      char[2] :: [A,L] -> R
      eos[2] :: [L,M] -> I
      eqChar[2] :: [A,A] -> Z
      bind_p_f[2] :: [J,K,L,M] -> I
      fail[2] :: [L,M] -> I
      filter[2] :: [J,U] -> J
      bind_p[2] :: [J,K,L] -> R
      bind'_p[2] :: [J,J,L] -> R
      filter_p[2] :: [J,U,L] -> R
      return[2] :: [A,L] -> X
      runParser[2] :: [J,B] -> D
      return_x[2] :: [A,L,M] -> I
      any_0[2] :: [M,G] -> H
      bind_0[2] :: [J,K,M,G] -> H
      bind'_0[2] :: [J,Q,L] -> R
      eos_0[2] :: [M,G] -> H
      fail_0[2] :: [M,G] -> H
      filter_0[2] :: [U,A,L] -> X
      return_0[2] :: [A,M,G] -> H
      runParser_0[2] :: [A,G] -> H
      any_anonymous_1[2] :: [M,G,B,C] -> D
      eos_anonymous_1[2] :: [M,G,B,C] -> D
      fail_anonymous_1[2] :: [G,B,C] -> D
      runParser_anonymous_1[2] :: [A,B,C] -> D
      bind_1[2] :: [K,M,A,G] -> H
      filter_cond[2] :: [Z,A,L,M] -> I
      any_anonymous[3] :: [M,G,B,C] -> D
      eos_anonymous[3] :: [M,G,B,C] -> D
      fail_anonymous[3] :: [G,B,C] -> D
      runParser_anonymous[3] :: [A,G,B,C] -> D
      any[3] :: [L,M,G] -> H
      bind[3] :: [J,K,L] -> R
      bind'[3] :: [J,J,L] -> R
      char[3] :: [A,L,M] -> I
      eos[3] :: [L,M,G] -> H
      bind_p_f[3] :: [J,K,L,M,G] -> H
      fail[3] :: [L,M,G] -> H
      filter[3] :: [J,U,L] -> R
      bind_p[3] :: [J,K,L,M] -> I
      bind'_p[3] :: [J,J,L,M] -> I
      filter_p[3] :: [J,U,L,M] -> I
      return[3] :: [A,L,M] -> I
      return_x[3] :: [A,L,M,G] -> H
      any_0[3] :: [M,G,E] -> F
      bind_0[3] :: [J,K,M,G,E] -> F
      bind'_0[3] :: [J,A,L,M] -> I
      eos_0[3] :: [M,G,E] -> F
      fail_0[3] :: [M,G,E] -> F
      filter_0[3] :: [U,A,L,M] -> I
      return_0[3] :: [A,M,G,E] -> F
      runParser_0[3] :: [A,G,E] -> F
      bind_1[3] :: [K,M,A,G,E] -> F
      filter_cond[3] :: [Z,A,L,M,G] -> H
      any[4] :: [L,M,G,E] -> F
      bind[4] :: [J,K,L,M] -> I
      bind'[4] :: [J,J,L,M] -> I
      char[4] :: [A,L,M,G] -> H
      eos[4] :: [L,M,G,E] -> F
      bind_p_f[4] :: [J,K,L,M,G,E] -> F
      fail[4] :: [L,M,G,E] -> F
      filter[4] :: [J,U,L,M] -> I
      bind_p[4] :: [J,K,L,M,G] -> H
      bind'_p[4] :: [J,J,L,M,G] -> H
      filter_p[4] :: [J,U,L,M,G] -> H
      return[4] :: [A,L,M,G] -> H
      return_x[4] :: [A,L,M,G,E] -> F
      any_0[4] :: [M,G,B,C] -> D
      bind_0[4] :: [J,K,M,G,B,C] -> D
      bind'_0[4] :: [J,A,L,M,G] -> H
      eos_0[4] :: [M,G,B,C] -> D
      fail_0[4] :: [M,G,B,C] -> D
      filter_0[4] :: [U,A,L,M,G] -> H
      return_0[4] :: [A,M,G,B,C] -> D
      runParser_0[4] :: [A,G,B,C] -> D
      bind_1[4] :: [K,M,A,G,B,C] -> D
      filter_cond[4] :: [Z,A,L,M,G,E] -> F
      any[5] :: [L,M,G,B,C] -> D
      bind[5] :: [J,K,L,M,G] -> H
      bind'[5] :: [J,J,L,M,G] -> H
      char[5] :: [A,L,M,G,E] -> F
      eos[5] :: [L,M,G,B,C] -> D
      bind_p_f[5] :: [J,K,L,M,G,B,C] -> D
      fail[5] :: [L,M,G,B,C] -> D
      filter[5] :: [J,U,L,M,G] -> H
      bind_p[5] :: [J,K,L,M,G,E] -> F
      bind'_p[5] :: [J,J,L,M,G,E] -> F
      filter_p[5] :: [J,U,L,M,G,E] -> F
      return[5] :: [A,L,M,G,E] -> F
      return_x[5] :: [A,L,M,G,B,C] -> D
      bind'_0[5] :: [J,A,L,M,G,E] -> F
      filter_0[5] :: [U,A,L,M,G,E] -> F
      filter_cond[5] :: [Z,A,L,M,G,B,C] -> D
      bind[6] :: [J,K,L,M,G,E] -> F
      bind'[6] :: [J,J,L,M,G,E] -> F
      char[6] :: [A,L,M,G,B,C] -> D
      filter[6] :: [J,U,L,M,G,E] -> F
      bind_p[6] :: [J,K,L,M,G,B,C] -> D
      bind'_p[6] :: [J,J,L,M,G,B,C] -> D
      filter_p[6] :: [J,U,L,M,G,B,C] -> D
      return[6] :: [A,L,M,G,B,C] -> D
      bind'_0[6] :: [J,A,L,M,G,B,C] -> D
      filter_0[6] :: [U,A,L,M,G,B,C] -> D
      bind[7] :: [J,K,L,M,G,B,C] -> D
      bind'[7] :: [J,J,L,M,G,B,C] -> D
      filter[7] :: [J,U,L,M,G,B,C] -> D 
)
