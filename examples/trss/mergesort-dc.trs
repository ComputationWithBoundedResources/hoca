
(STRATEGY
    INNERMOST)

(VAR
    x2 x1 x3 x17 x13 x8 x7 x6 x5 x4 x43)
(RULES
    rec[mapL_0][2](rec[dc_0](divisible()
                            ,mergesort_0()
                            ,divide()
                            ,const_f(combine()))
                  ,NilL()) -> NilL()
    rec[mapL_0][2](rec[dc_0](divisible()
                            ,mergesort_0()
                            ,divide()
                            ,const_f(combine()))
                  ,ConsL(x2,x1)) ->
      ConsL(rec[dc_0][1](divisible()
                        ,mergesort_0()
                        ,divide()
                        ,const_f(combine())
                        ,x2)
           ,rec[mapL_0][2](rec[dc_0](divisible()
                                    ,mergesort_0()
                                    ,divide()
                                    ,const_f(combine()))
                          ,x1))
    rec[dc_0][1](divisible(),mergesort_0(),divide(),const_f(combine()),Nil()) ->
      Nil()
    rec[dc_0][1](divisible()
                ,mergesort_0()
                ,divide()
                ,const_f(combine())
                ,Cons(x1,Nil())) -> Cons(x1,Nil())
    rec[dc_0][1](divisible()
                ,mergesort_0()
                ,divide()
                ,const_f(combine())
                ,Cons(x3,Cons(x2,x1))) ->
      combine[1](rec[mapL_0][2](rec[dc_0](divisible()
                                         ,mergesort_0()
                                         ,divide()
                                         ,const_f(combine()))
                               ,ConsL(Cons(x3
                                          ,rec[take_0][2](rec[halve_0][1](rec[length_0][1](x1))
                                                         ,Cons(x2,x1)))
                                     ,ConsL(rec[drop_0][2](rec[halve_0][1](rec[length_0][1](x1))
                                                          ,Cons(x2,x1))
                                           ,NilL()))))
    rec[take_0][2](0(),x1) -> Nil()
    rec[take_0][2](S(0()),Nil()) -> Cons(Head_error_empty_list(),Nil())
    rec[take_0][2](S(x3),Cons(x2,x1)) -> Cons(x2,rec[take_0][2](x3,x1))
    rec[halve_0][1](0()) -> 0()
    rec[halve_0][1](S(0())) -> S(0())
    rec[halve_0][1](S(S(x17))) -> S(rec[halve_0][1](x17))
    rec[length_0][1](Nil()) -> 0()
    rec[length_0][1](Cons(x13,x17)) -> S(rec[length_0][1](x17))
    rec[drop_0][2](0(),x1) -> x1
    rec[drop_0][2](S(0()),Nil()) -> Tail_error_empty_list()
    rec[drop_0][2](S(x3),Cons(x2,x1)) -> rec[drop_0][2](x3,x1)
    merge_cond_2(True(),Cons(x8,x7),Cons(x6,x5),x4,x3,x2,x1) ->
      Cons(x4,rec[merge_0][2](x3,Cons(x6,x5)))
    merge_cond_2(False(),Cons(x8,x7),Cons(x6,x5),x4,x3,x2,x1) ->
      Cons(x2,rec[merge_0][2](Cons(x8,x7),x1))
    rec[leq_0][2](0(),x1) -> True()
    rec[leq_0][2](S(x1),0()) -> False()
    rec[leq_0][2](S(x2),S(x1)) -> rec[leq_0][2](x2,x1)
    rec[merge_0][2](Nil(),x1) -> x1
    rec[merge_0][2](Cons(x2,x1),Nil()) -> Cons(x2,x1)
    rec[merge_0][2](Cons(x4,x3),Cons(x2,x1)) -> merge_cond_2(rec[leq_0][2](x4
                                                                          ,x2)
                                                            ,Cons(x4,x3)
                                                            ,Cons(x2,x1)
                                                            ,x4
                                                            ,x3
                                                            ,x2
                                                            ,x1)
    combine[1](ConsL(x7,ConsL(x5,x3))) -> rec[merge_0][2](x7,x5)
    main(x43) -> rec[dc_0][1](divisible()
                             ,mergesort_0()
                             ,divide()
                             ,const_f(combine())
                             ,x43))

